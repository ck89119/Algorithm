#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define dump(x) cerr <<  __LINE__ << " : "<< #x << "  =  " << (x) <<endl;
#define FR(i,a,b) for(int i=(a);i<(b);++i)//[a,b)
#define CL(a,x) memset(a,x,sizeof(a))
#define MP(A,B) make_pair(A,B)
//freopen("","r",stdin);
//freopen("","w",stdout);
const long long MAXN=(1LL<<62);
const int INF=(1<<30);
const double PI=acos(-1.0);
const double EPS=1e-11;


class IDNumberVerification {
public:
    int two[20];

    int IsLeap(int year) {
        if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0)
        return 1;
        else return 0;
    }

    int CheckRegion(string code, vector<string> &regionCodes) {
        int i;
        for (i = 0; i < regionCodes.size(); i++)
            if (code == regionCodes[i]) return 1;
        return 0;
    }

    int CheckBirth(int year, int month, int day) {
        if (year < 1900 || year > 2011) return 0;
        if (month < 1 || month >12) return 0;
        else {
            if (month == 2) {
                if (IsLeap(year))
                    return (day >= 1 && day <= 29);
                else
                    return (day >= 1 && day <= 28);
            }
            else if (month == 1 || month == 3 || month == 5 || month == 7 ||
                     month == 8 || month == 10 || month == 12){
                        return (day >= 1 && day <= 31);
                     }
            else {
                return (day >= 1 && day <= 30);
            }
        }
    }

    char CheckSum(string id) {
        int i;
        int sum;
        two[0] = 1;
        for (i = 1; i <= 17; i++) {
            two[i] = two[i-1]<<1;
            two[i] %= 11;
        }
        sum = 0;
        for (i = 1; i <= 17; i++) {
            sum = sum + two[18-i] * (id[i-1] - '0');
            sum %= 11;
        }
        if ((12 - sum) % 11 < 10) return '0' + (12 - sum) % 11;
        return 'X';
    }

    int CheckSeq(string seq) {
        if (seq == "000") return 0;
        else return 1;
    }

	string verify(string id, vector <string> regionCodes) {
		string code;
		string seq;
		int i;
		int year, month, day;
		code = id.substr(0,6);
		if (!CheckRegion(code,regionCodes)) return "Invalid";
		year = 0; month = 0; day = 0;
		for (i = 6; i < 10; i++)
            year = year * 10 + id[i] - '0';
        for (i = 10; i < 12; i++)
            month = month * 10 + id[i] - '0';
        for (i = 12; i < 14; i++)
            day = day * 10 + id[i] - '0';
        seq = id.substr(14,3);
		if (CheckBirth(year, month, day) && CheckSum(id) == id[17] && CheckSeq(seq)) {
            if ((id[16] - '0') % 2) return "Male";
            else return "Female";
		}
		else return "Invalid";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, vector <string> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	IDNumberVerification *obj;
	string answer;
	obj = new IDNumberVerification();
	clock_t startTime = clock();
	answer = obj->verify(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	vector <string> p1;
	string p2;

	{
	// ----- test 0 -----
	p0 = "441323200312060636";
	string t1[] = {"441323"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Male";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "62012319240507058X";
	string t1[] = {"620123"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Female";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "321669197204300886";
	string t1[] = {"610111","659004"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Invalid";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "230231198306900162";
	string t1[] = {"230231"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Invalid";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = "341400198407260005";
	string t1[] = {"341400"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Invalid";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	p0 = "520381193206090891";
	string t1[] = {"532922","520381"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Invalid";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
