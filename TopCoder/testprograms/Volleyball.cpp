/*
ID: ck891191
PROG:
LANG: C++
*/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <string>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <queue>
using namespace std;
#define dump(x) cerr <<  __LINE__ << " : "<< #x << "  =  " << (x) <<endl;
#define FR(i,a,b) for(int i=(a);i<(b);++i)//[a,b)
#define CL(a,x) memset(a,x,sizeof(a))
#define two(X) (1<<(X))
#define towL(X) (((int64)(1))<<(x))
#define contain(S,X) ((S&two(X))>0)
#define containL(S,X) ((S&twoL(X))>0)
const long long MAXN=(1LL<<62);
const int INF=(1<<30);
const double PI=acos(-1.0);
const double EPS=1e-20;

double points[2000][2000][2];
class Volleyball {
public:
	double win(int sScore, int rScore, double probWinServe) {
	    double res;
	    int update;
	    FR(i,0,2000)FR(j,0,2000)FR(k,0,2) points[i][j][k]=0.0;
	    points[sScore][rScore][0]=1.0;res=0.0;
		while (1){
            update=0;
            for (int i=sScore;i<2000;i++)
                for (int j=rScore;j<2000;j++)
                    for (int k=0;k<2;k++){
                        if (points[i][j][k]>EPS&&!(i>=15&&i-j>=2||j>=15&&j-i>=2)){
                            update=1;
                            if (k==0){
                                points[i+1][j][0]+=points[i][j][0]*probWinServe;
                                points[i][j+1][1]+=points[i][j][0]*((double)1-probWinServe);
                                points[i][j][0]=0.0;
                            }
                            if (k==1){
                                points[i+1][j][0]+=points[i][j][1]*((double)1-probWinServe);
                                points[i][j+1][1]+=points[i][j][1]*probWinServe;
                                points[i][j][1]=0.0;
                            }
                        }
                        if (points[i][j][k]>EPS&&i>=15&&i-j>=2){
                            res+=points[i][j][k];
                            points[i][j][k]=0.0;
                        }
                    }
            if (!update) break;
		}
		return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, double p2, bool hasAnswer, double p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	Volleyball *obj;
	double answer;
	obj = new Volleyball();
	clock_t startTime = clock();
	answer = obj->win(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	double p2;
	double p3;

	{
	// ----- test 0 -----
	p0 = 13;
	p1 = 13;
	p2 = .5;
	p3 = 0.5;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 14;
	p2 = 0.01;
	p3 = 3.355704697986578E-27;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 8;
	p1 = 12;
	p2 = 0.4;
	p3 = 0.046377890909090946;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 4;
	p1 = 3;
	p2 = 0.01;
	p3 = 0.6662085066547871;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
