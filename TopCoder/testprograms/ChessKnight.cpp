#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;
#define dump(x) cerr <<  __LINE__ << " : "<< #x << "  =  " << (x) <<endl;
#define FR(i,a,b) for(int i=(a);i<(b);++i)//[a,b)

int dir[8][2]={{-1,-2},{-2,-1},{-2,1},{-1,2},{1,2},{2,1},{2,-1},{1,-2}};

class ChessKnight {
public:
    int inBoard(int x,int y){
        if ((x>=1&&x<=8)&&(y>=1&&y<=8)) return 1;
        else return 0;
    }
	double probability(int x, int y, int n) {
		double res;
		double p1[9][9],p2[9][9];
		FR(i,1,9)FR(j,1,9) p1[i][j]=0.0;
		p1[x][y]=1.0;
		FR(k,1,n+1){
		    FR(i,1,9)FR(j,1,9) p2[i][j]=0.0;
            FR(i,1,9)FR(j,1,9)
                FR(d,0,8)
                if (inBoard(i+dir[d][0],j+dir[d][1]))
                    p2[i][j]+=p1[i+dir[d][0]][j+dir[d][1]]/8;
            FR(i,1,9)FR(j,1,9) p1[i][j]=p2[i][j];
		}
		res=0.0;
		FR(i,1,9)FR(j,1,9) res+=p1[i][j];
//		for (int i=0;i<=8;i++)
//            for (int j=0;j<=8;j++) p[i][j]=0.0;
//        p[x][y]=1.0;
//		st.x=x;st.y=y;st.n=0;
//		que.push(st);
//		while (!que.empty()){
//            pos tmp,tmp2;
//            tmp=que.front();que.pop();
//            if (tmp.n==n) break;
//
//            for (int i=0;i<8;i++){
//                if (inBoard(tmp.x+d[i][0],tmp.y+d[i][1])){
//                    tmp2.x=tmp.x+d[i][0];
//                    tmp2.y=tmp.y+d[i][1];
//                    tmp2.n=tmp.n+1;
//                    p[tmp2.x][tmp2.y]+=p[tmp.x][tmp.y]/8;
//                    que.push(tmp2);
//                    dump(tmp2.x);dump(tmp2.y);
//                }
//            }
//            p[tmp.x][tmp.y]=0;
//		}
//		res=0.0;
//		for (int i=1;i<=8;i++)
//            for (int j=1;j<=8;j++)
//                res+=p[i][j];
        return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, double p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	ChessKnight *obj;
	double answer;
	obj = new ChessKnight();
	clock_t startTime = clock();
	answer = obj->probability(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;
	double p3;

	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 1;
	p2 = 2;
	p3 = 0.1875;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 4;
	p1 = 4;
	p2 = 1;
	p3 = 1.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 2;
	p1 = 3;
	p2 = 10;
	p3 = 0.0522148497402668;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 4;
	p1 = 3;
	p2 = 50;
	p3 = 8.356427906809618E-7;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
