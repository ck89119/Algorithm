#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
using namespace std;
#define dump(x) cerr <<  __LINE__ << " : "<< #x << "  =  " << (x) <<endl;
struct BOND{
    int begin,end;
};
int visited[55];
int power[55];
int res;

int cmp(const int &a,const int &b){
    return a>b;
}


class MagicMoleculeEasy {
public:
    int size,K;
    BOND bond[50*25];
    int bond_size;
//    int check(){
//        int i;
//        int sum;
//        sum=0;
//        memset(cover,0,sizeof(cover));
//        for (i=0;i<size;i++)
//            if (visited[i]){
//                sum+=power[i];
//                cover[i]=1;
//                for (j=0;j<size;j++)
//                    if (connect[i][j]) cover[j]=1;
//            }
//        for (i=0;i<size;i++)
//            if (visited[i]) sum+=power[i];
//        if (sum<res) return 0;
//        for (i=0;i<bond_size;i++)
//            if (!(visited[bond[i].begin]||visited[bond[i].end]))
//                break;
//
//        if (i<bond_size) return 0;
//        else {
//            res=sum;
//            return 1;
//        }
//    }
//
//    int dfs(int k,int st){
//        int i;
//        if (k==K){
//            check();
//            return 0;
//        }
//        if (st>=size) return 0;
//        if (size-st<K-k) return 0;
//        for (i=st;i<size;i++)
//            if (!visited[i]){
//                visited[i]=1;
//                dfs(k+1,i+1);
//                visited[i]=0;
//            }
//        return 0;
//    }


    int rec(int k,int p){
        int i,u,v;
        int sum,x[55];

        if (p==bond_size){
            sum=0;x[0]=0;
            for (i=0;i<size;i++)
                if (visited[i]) sum+=power[i];
                else x[++x[0]]=power[i];
            //dump(x[0]);
            sort(x+1,x+(x[0]+1),cmp);
            for (i=1;i<=k;i++)
                sum+=x[i];
            res=max(res,sum);
        }
        else{
            u=bond[p].begin;
            v=bond[p].end;
            if (visited[u]||visited[v]){
                rec(k,p+1);
            }
            else if (k>0){
                visited[u]=1;
                rec(k-1,p+1);
                visited[u]=0;

                visited[v]=1;
                rec(k-1,p+1);
                visited[v]=0;
               }
        }
        return 0;
    }

	int maxMagicPower(vector <int> magicPower, vector <string> magicBond, int k) {
        int i,j;
        size=magicPower.size();

        K=k;res=-1;
        memset(visited,0,sizeof(visited));
       // dump(size);
        for (i=0;i<size;i++)
            power[i]=magicPower[i];
//        for (i=0;i<size;i++)
//            for (j=0;j<size;j++)
//                if (magicBond[i][j]=='Y') connect[i][j]=1;

        for (i=0;i<size;i++)
            for (j=0;j<i;j++)
                if (magicBond[i][j]=='Y'){
                    bond[bond_size].begin=j;
                    bond[bond_size].end=i;
                    bond_size++;
                }
       // dump(bond_size);
        rec(k,0);
        return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <string> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	MagicMoleculeEasy *obj;
	int answer;
	obj = new MagicMoleculeEasy();
	clock_t startTime = clock();
	answer = obj->maxMagicPower(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	vector <string> p1;
	int p2;
	int p3;

	{
	// ----- test 0 -----
	int t0[] = {1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"NY","YN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	p3 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {100,1,100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"NYN","YNY","NYN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	p3 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {100,1,100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"NYN","YNY","NYN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	p3 = 200;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {4,7,5,8};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"NYNY","YNYN","NYNY","YNYN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	p3 = 15;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	int t0[] = {46474,60848,98282,58073,42670,50373};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"NYNNNY","YNNYNY","NNNYYY","NYYNNN","NNYNNN","YYYNNN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = 209503;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	int t0[] = {1,1,1,1,1,1,1,1,1,1,1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"NNYYYNYYNYNNY","NNYNYYYYYYYNY","YYNYYNYYYYYYY","YNYNYYNYYYYYY","YYYYNNYYYYYNY","NYNYNNYYYYYNN","YYYNYYNYYYYYY","YYYYYYYNYNYYY","NYYYYYYYNYYYY","YYYYYYYNYNNNN","NYYYYYYYYNNYN","NNYYNNYYYNYNN","YYYYYNYYYNNNN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 9;
	p3 = -1;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 6 -----
	int t0[] = {1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"NN","NN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	p3 = 1;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 7 -----
	int t0[] = {1,1,2,5,2,4,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"NNNNNNN","NNYNNNN","NYNNNYN","NNNNNNY","NNNNNNN","NNYNNNN","NNNYNNN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = 11;
	all_right = KawigiEdit_RunTest(7, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
