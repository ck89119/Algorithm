/*
ID: ck89119
PROG:
LANG: C++
*/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cstdlib>
#include <ctime>
using namespace std;
#define dump(x) cerr <<  __LINE__ << " : "<< #x << "  =  " << (x) <<endl;
#define FR(i,a,b) for(int i=(a);i<(b);++i)//[a,b)
#define CLR(a,x) memset(a,x,sizeof(a))
#define MP(A,B) make_pair(A,B)
#define PB(A) push_back(A)
#define PAU system("pause");
#define lson l, m, rt << 1
#define rson m + 1, r, rt << 1 | 1
#define lowbit(n) (n^(n-1))&n
#define fin freopen("in.txt","r",stdin);
#define fout freopen("out.txt","w",stdout);
//ifstream fin("");
//ofstream fout("");
#define LL long long

template <class T> void out(T A[],int n){for (int i=0;i<n;i++) cout<<A[i]<<" ";cout<<endl;}
template <class T> void out (vector<T> A,int n=-1){if(n==-1) n=A.size();for (int i=0;i<n;i++) cout<<A[i]<<" ";cout<<endl;}
const int MAXN=99999;
const int MAXM=9999999;
const int INF=(1<<30);
const double PI=acos(-1.0);
const double EPS=1e-11;

struct CRD{
    int x, y;
};
int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, 1, 0, -1};

class FoxAndGo {
public:
    int n;
    int iboard[25][25], ans[25][25];

    int inBoard(int x, int y) {
        if (x >= 0 && x < n && y >= 0 && y < n) return 1;
        else return 0;
    }

    int bfs(queue<CRD> &q, CRD &res) {
        int numOut = 0;
        int k, sum = 0;
        res.x = -n; res.y = -n;
        while (!q.empty()) {
            CRD tmp;
            tmp = q.front(); q.pop(); sum++;
            int x = tmp.x;
            int y = tmp.y;
            int c = iboard[x][y];
            for (k = 0; k < 4; k++) {
                int tx = x + dx[k];
                int ty = y + dy[k];
                if (inBoard(tx, ty)) {
                    if (iboard[tx][ty] == -1) {
                        CRD t;
                        t.x = tx; t.y = ty;
                        iboard[tx][ty] = c;
                        q.push(t);
                    }
                    if (iboard[tx][ty] == 0) {
                        if (numOut == 0) {
                            numOut++;
                            res.x = tx; res.y = ty;
                        }
                        else {
                            if (res.x != tx || res.y != ty) numOut++;
                        }
                    }
                }
            }
        }
        if (numOut >= 2) res.x = -1, res.y = -1;
        //dump(sum)
        return sum;
    }

	int maxKill(vector <string> board) {
		int i, j;
		int sum = 0;
		n = board.size();
		CLR(iboard, 0); CLR(ans, 0);
		for (i = 0; i < n; i++)
            for (j = 0; j < n; j++)
                if (board[i][j] == 'o') iboard[i][j] = -1;
                else if (board[i][j] == 'x') iboard[i][j] = -2;
        int k = 0;
        for (i = 0; i < n; i++)
            for (j = 0; j < n; j++)
                if (iboard[i][j] == -1) {
                    //dump(i)dump(j)dump(k)
                    queue<CRD> q;
                    CRD tmp, res;
                    int s;
                    tmp.x = i; tmp.y = j;
                    q.push(tmp);
                    iboard[i][j] = ++k;
                    s = bfs(q, res);
                    //dump(s)dump(res.x)dump(res.y)
                    if (res.x == -n && res.y == -n) sum += s;
                    else if (!(res.x == -1 && res.y == -1)) ans[res.x][res.y] += s;
                }
        int mx = 0;
        for (i = 0; i < n; i++)
            for (j = 0; j < n; j++)
                mx = max(mx, ans[i][j]);
        dump(sum) dump(mx)
        return mx+sum;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	FoxAndGo *obj;
	int answer;
	obj = new FoxAndGo();
	clock_t startTime = clock();
	answer = obj->maxKill(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;

//	{
//	// ----- test 0 -----
//	string t0[] = {".....","..x..",".xox.",".....","....."};
//			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
//	p1 = 1;
//	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
//	// ------------------
//	}
//
//	{
//	// ----- test 1 -----
//	string t0[] = {"ooooo","xxxxo","xxxx.","xxxx.","ooooo"};
//			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
//	p1 = 6;
//	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
//	// ------------------
//	}
//
//	{
//	// ----- test 2 -----
//	string t0[] = {".xoxo","ooxox","oooxx","xoxox","oxoox"};
//			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
//	p1 = 13;
//	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
//	// ------------------
//	}
//
//	{
//	// ----- test 3 -----
//	string t0[] = {".......",".......",".......","xxxx...","ooox...","ooox...","ooox..."};
//			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
//	p1 = 9;
//	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
//	// ------------------
//	}
//
	{
	// ----- test 4 -----
	string t0[] = {".......",".xxxxx.",".xooox.",".xo.ox.",".xooox.",".xxxxx.","......."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

//	{
//	// ----- test 5 -----
//	string t0[] = {"o.xox.o","..xox..","xxxoxxx","ooo.ooo","xxxoxxx","..xox..","o.xox.o"};
//			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
//	p1 = 12;
//	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
//	// ------------------
//	}
//
//	{
//	// ----- test 6 -----
//	string t0[] = {".......","..xx...",".xooox.",".oxxox.",".oxxxo.","...oo..","......."};
//			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
//	p1 = 4;
//	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
//	// ------------------
//	}
//
//	{
//	// ----- test 7 -----
//	string t0[] = {".ox....","xxox...","..xoox.","..xoox.","...xx..",".......","......."};
//			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
//	p1 = 5;
//	all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
//	// ------------------
//	}
//
//	{
//	// ----- test 8 -----
//	string t0[] = {"...................","...................","...o..........o....","................x..","...............x...","...................","...................","...................","...................","...................","...................","...................","...................","...................","................o..","..x................","...............x...","...................","..................."};
//			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
//	p1 = 0;
//	all_right = KawigiEdit_RunTest(8, p0, true, p1) && all_right;
//	// ------------------
//	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING









//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
