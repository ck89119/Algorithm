#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define dump(x) cerr <<  __LINE__ << " : "<< #x << "  =  " << (x) <<endl;
#define FR(i,a,b) for(int i=(a);i<(b);++i)//[a,b)
#define CL(a,x) memset(a,x,sizeof(a))
#define MP(A,B) make_pair(A,B)
//freopen("","r",stdin);
//freopen("","w",stdout);
const long long MAXN=(1LL<<62);
const int INF=(1<<30);
const double PI=acos(-1.0);
const double EPS=1e-11;

struct p{
    int i;
    int dep;
};

class Egalitarianism {
public:
    int v[55];
    int n;
    int maxDep;
    int dfs(int cur, vector<string> &isFriend) {
        int i;
        for (i = 0; i < n; i++)
            if (!v[i] && isFriend[cur][i] == 'Y') {
                v[i] = 1;
                dfs(i, isFriend);
            }
        return 0;
    }

    int bfs(int cur, vector<string> &isFriend) {
        int i;
        int res;
        queue<p> q;
        p t;
        while (!q.empty()) q.pop();
        res = 0;
        t.i = cur; t.dep = 0;
        q.push(t);
        v[cur] = 1;
        while (!q.empty()) {
            t = q.front();
            q.pop();
            res = max(res, t.dep);
            for (i = 0; i < n; i++)
                if (!v[i] && isFriend[t.i][i] == 'Y') {
                    p tmp;
                    tmp.i = i; tmp.dep = t.dep+1;
                    q.push(tmp);
                    v[i] = 1;
                }
        }
        return res;
    }

	int maxDifference(vector <string> isFriend, int d) {
		int i;
		int res;
		n = isFriend.size();
		CL(v, 0);
		dfs(0, isFriend);
		for (i = 0; i < n; i++)
            if (!v[i]) return -1;
        res = 0;
        for (i = 0; i < n; i++){
            CL(v, 0);
            res = max(res, bfs(i, isFriend));
        }
        return res*d;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	Egalitarianism *obj;
	int answer;
	obj = new Egalitarianism();
	clock_t startTime = clock();
	answer = obj->maxDifference(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;
	int p2;

	{
	// ----- test 0 -----
	string t0[] = {"NYN","YNY","NYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	p2 = 20;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"NN","NN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = -1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"NNYNNN","NNYNNN","YYNYNN","NNYNYY","NNNYNN","NNNYNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1000;
	p2 = 3000;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"NNYN","NNNY","YNNN","NYNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 584;
	p2 = -1;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {"NYNYYYN","YNNYYYN","NNNNYNN","YYNNYYN","YYYYNNN","YYNYNNY","NNNNNYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	p2 = 20;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	string t0[] = {"NYYNNNNYYYYNNNN","YNNNYNNNNNNYYNN","YNNYNYNNNNYNNNN","NNYNNYNNNNNNNNN","NYNNNNYNNYNNNNN","NNYYNNYNNYNNNYN","NNNNYYNNYNNNNNN","YNNNNNNNNNYNNNN","YNNNNNYNNNNNYNN","YNNNYYNNNNNNNNY","YNYNNNNYNNNNNNN","NYNNNNNNNNNNNNY","NYNNNNNNYNNNNYN","NNNNNYNNNNNNYNN","NNNNNNNNNYNYNNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 747;
	p2 = 2988;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 6 -----
	string t0[] = {"NY","YN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 0;
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
