#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
#define dump(x) cerr <<  __LINE__ << " : "<< #x << "  =  " << (x) <<endl;
template <class T> void out(T A[],int n){for (int i=0;i<n;i++) cout<<A[i]<<" ";cout<<endl;}

class FlippingBitsDiv2 {
public:
    int dp1[2505][2], dp2[2505][2];
    int num1[2505], num2[2505], sum1[2505], sum2[2505]; //num of 0
    int t1[2505], t2[2505];
    int n, m, g;

    int dp() {
        int i;
        dp1[0][0] = dp1[0][1] = 0;
        dp2[0][0] = dp2[0][1] = 0;
        for (i = 1; i <= g; i++) {
            if (i == 1) {
                dp1[1][0] = min(dp1[i-1][0] + num1[i], dp1[i-1][1] + num1[i]);
                dp1[1][1] = min(dp1[i-1][0] + 1 + m - num1[i], dp1[i-1][1] + 1 + m - num1[i]);
                dp2[1][0] = min(dp2[i-1][0] + num2[i], dp2[i-1][1] + num2[i]);
                dp2[1][1] = min(dp2[i-1][0] + 1 + m - num2[i], dp2[i-1][1] + 1 + m - num2[i]);
            }
            else {
                dp1[i][0] = min(dp1[i-1][0] + num1[i], dp1[i-1][1] + num1[i]);
                dp1[i][1] = min(dp1[i-1][0] + 2 + m - num1[i], dp1[i-1][1] + m - num1[i]);
                dp2[i][0] = min(dp2[i-1][0] + num2[i], dp2[i-1][1] + num2[i]);
                dp2[i][1] = min(dp2[i-1][0] + 2 + m - num2[i], dp2[i-1][1] + m - num2[i]);
            }

        }
        return 0;
    }

	int getmin(vector <string> S, int M) {
		string s = "";
		int i, j;
		int res = 999999;

		for (i = 0; i < S.size(); i++)
            s += S[i];
        n = s.size(); m = M; g = n / m;
        for (i = 0; i < n; i++) {
            t1[i] = s[i] - '0';
            if (t1[i] == 0) num1[i/m+1]++;
        }
        sum1[0] = 0;
        for (i = 1; i <= g; i++) sum1[i] = sum1[i-1] + num1[i];

        for (i = n-1; i >= 0; i--) {
            t2[i] = t1[n-1-i];
            if (t2[i] == 0) num2[i/m+1]++;
        }
        sum2[0] = 0;
        for (i = 1; i <= g; i++) sum2[i] = sum2[i-1] + num2[i];

        dp();
        //for (i = 0; i <= g; i++) cout << dp1[i][0] << ' ' << dp1[i][1] << ' ';cout << endl;
        //for (i = g; i >= 0; i--) cout << dp2[i][0] << ' ' << dp2[i][1] << ' ';cout << endl;
        for (i = 0; i <= g; i++)
            for (j = 0; j <= g-i; j++)
                res = min(res, min(dp1[i][0], dp1[i][1]) +
                               min(dp2[j][0], dp2[j][1]) +
                               sum1[g-j] - sum1[i]);


        return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	FlippingBitsDiv2 *obj;
	int answer;
	obj = new FlippingBitsDiv2();
	clock_t startTime = clock();
	answer = obj->getmin(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;
	int p2;

	{
	// ----- test 0 -----
	string t0[] = {"101100001101"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"00111000"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"111111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"00100"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	p2 = 2;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {"00010","11010110","1010111","110001010","0110001100","000110110","011010101","00","111","100"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 13;
	p2 = 31;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
