#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define dump(x) cerr <<  __LINE__ << " : "<< #x << "  =  " << (x) <<endl;
#define FR(i,a,b) for(int i=(a);i<(b);++i)//[a,b)
#define CL(a,x) memset(a,x,sizeof(a))
#define MP(A,B) make_pair(A,B)
//freopen("","r",stdin);
//freopen("","w",stdout);
const long long MAXN=(1LL<<62);
const int INF=(1<<30);
const double PI=acos(-1.0);
const double EPS=1e-11;


long long nCr[55][55];

int init() {
    int i, j;
    for (i = 0; i <= 50; i++) nCr[i][0] = 1;
    for (i = 1; i <= 50; i++)
        for (j = 1; j <= i; j++)
            nCr[i][j] = nCr[i-1][j-1] + nCr[i-1][j];
    return 0;
}

class Excavations2 {
public:
    long long dp[55][55];
    int num[55];
    int n;
    long long count(vector <int> kind, vector <int> found, int K) {
        int i, j, k;
        init();
        n = found.size();
        CL(num, 0);
        for (i = 0; i < kind.size(); i++) num[kind[i]]++;
        //for (i = 0; i <= 50; i++) cout<<num[i]<<' ';cout<<endl;
        CL(dp, 0);
        for (k = 1; k <= K; k++)
            dp[k][0] = nCr[num[found[0]]][k];
        for (k = 1; k <= K; k++)
            cout<<dp[k][0]<<(k == K ? '\n' : ' ');

        for (i = 1; i < n; i++) {
            int t = num[found[i]];
            for (k = 1; k <= K; k++)
                for (j = 1; j <= min(t, k); j++)
                    dp[k][i] += dp[k-j][i-1]*nCr[t][j];
        }



        return dp[K][n-1];
    }
//    int num[55];
//    long long ans;
//
//    int dfs(vector<int> &found, int k, int left, long long ans1) {
//        int i;
//        dump(left)dump(k)dump(ans1)
//        if (left == 0 && k == found.size()) {
//            ans += ans1;
//            return 0;
//        }
//        if (k == found.size()) return 0;
//
//        for (i = 1; i <= min(num[found[k]], left); i++)
//            dfs(found, k+1, left-i, ans1*nCr[num[found[k]]][i]);
//        return 0;
//    }
//
//	long long count(vector <int> kind, vector <int> found, int K) {
//		int n = kind.size();
//		int i;
//		init();
//		CL(num, 0);
//		for (i = 0; i < n; i++)
//            num[kind[i]]++;
//        ans = 0;
//        dfs(found, 0, K, 1);
//        return ans;
//	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, long long p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	Excavations2 *obj;
	long long answer;
	obj = new Excavations2();
	clock_t startTime = clock();
	answer = obj->count(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	vector <int> p1;
	int p2;
	long long p3;

	{
	// ----- test 0 -----
	int t0[] = {1, 2, 2, 1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	p3 = 1ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {1,2,2,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	p3 = 4ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {1,2,1,1,2,3,4,3,2,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {4,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = 6ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {50};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 21;
	p3 = 5567902560ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
