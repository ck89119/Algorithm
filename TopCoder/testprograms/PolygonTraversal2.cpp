#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
using namespace std;
#define dump(x) cerr <<  __LINE__ << " : "<< #x << "  =  " << (x) <<endl;
struct EDGE{
    int big,small;
};
EDGE edge[15];
int edge_size;

class PolygonTraversal2 {
public:
    int res,n;
    int st;
    int visited[15];

    int interse(int k,int a,int b){
        if (edge[k].big>max(a,b)&&max(a,b)>edge[k].small
            &&edge[k].small>min(a,b)) return 1;
        if (edge[k].big<max(a,b)&&min(a,b)>edge[k].small
            &&edge[k].big>min(a,b)) return 1;
        return 0;
    }

    int rec(int k){
        int i,j;
        //dump(k);dump(visited[0]);
        if (visited[0]==n){
            //dump("###");
            for (i=0;i<edge_size;i++)
                if (interse(i,k,st)){res++;return 0;}
        }
        for (i=1;i<=n;i++)
            if (!visited[i]){
                for (j=0;j<edge_size;j++)
                    if (interse(j,k,i)){
                        visited[i]=1;
                        visited[0]++;
                        edge[edge_size].big=max(i,k);
                        edge[edge_size].small=min(i,k);
                        edge_size++;
                        rec(i);
                        edge_size--;
                        visited[i]=0;
                        visited[0]--;
                        break;
                    }
            }
        return 0;
    }

	int count(int N, vector <int> points) {
	    int i;
	    n=N;st=points[0];
	    memset(visited,0,sizeof(visited));
	    for (i=0;i<points.size();i++){
            visited[points[i]]=1;
            visited[0]++;
	    }//dump(visited[0]);
	    edge_size=0;
	    for (i=1;i<points.size();i++){
            edge[edge_size].big=max(points[i],points[i-1]);
            edge[edge_size].small=min(points[i],points[i-1]);
            edge_size++;
        }
        //dump(edge_size);
	    rec(points[points.size()-1]);

		return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	PolygonTraversal2 *obj;
	int answer;
	obj = new PolygonTraversal2();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	vector <int> p1;
	int p2;

	{
	// ----- test 0 -----
	p0 = 5;
	int t1[] = {1,3,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 6;
	int t1[] = {1,4,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 7;
	int t1[] = {2,4,7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 7;
	int t1[] = {1,2,3,4,6,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = 11;
	int t1[] = {1,5,10};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1412;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
