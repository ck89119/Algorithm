#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define dump(x) cerr <<  __LINE__ << " : "<< #x << "  =  " << (x) <<endl;
#define FR(i,a,b) for(int i=(a);i<(b);++i)//[a,b)
#define CL(a,x) memset(a,x,sizeof(a))
#define MP(A,B) make_pair(A,B)
//freopen("","r",stdin);
//freopen("","w",stdout);
const long long MAXN=(1LL<<62);
const int INF=(1<<20);
const double PI=acos(-1.0);
const double EPS=1e-11;

//class GameOnABoard {
//public:
//    int l, m, n;
//    int dis[1605][1605];
//
//    int adj(int x1, int y1, int x2, int y2) {
//        if (abs(x1-x2) + abs(y1-y2) == 1) return 1;
//        else return 0;
//    }
//
//    int floyed() {
//        int i, j, k;
//        int ix, iy, jx, jy, kx, ky;
//        for (k = 0; k < n; k++) {
//            kx = k / l; ky = k % l;
//            for (i = 0; i < n; i++) {
//                ix = i / l; iy = i % l;
//                for (j = 0; j < n; j++) {
//                    jx = j / l; jy = j % l;
////                    dump(i)dump(j)dump(k)
//                    dis[i][j] = min(dis[i][j], dis[i][k]+dis[k][j]-dis[k][k]);
////                    dump(dis[i][j])
//                    }
//            }
//        }
//        return 0;
//    }
//
//	int optimalChoice(vector <string> cost) {
//		int i, j;
//		int res, tmp;
//		l = cost[0].size();
//		m = cost.size();
//		n = l * m;
//		for (i = 0; i < n; i++){
//            for (j = 0; j < n; j++){
//                if (i == j) dis[i][j] = cost[i/l][i%l] - '0';
//                else if (adj(i/l,i%l,j/l,j%l)) dis[i][j] = cost[i/l][i%l] - '0' + cost[j/l][j%l] - '0';
//                else dis[i][j] = INF;
//                //cout<<dis[i][j]<<' ';
//            }
//            //cout<<endl;
//            }
//        floyed();
////        for (i=0;i<n;i++){
////            for (j=0;j<n;j++)
////                if (dis[i][j]!=INF) cout<<dis[i][j]<<' ';
////                else cout<<"X ";
////            cout<<endl;}
//
//        res = INF;
//        for (i = 0; i < n; i++){
//            tmp = 0;
//            for (j = 0; j < n; j++)
//                tmp = max(tmp, dis[i][j]);
//            res = min(res, tmp);
//        }
//        return res;
//	}
//};

class GameOnABoard {
public:

	int optimalChoice(vector <string> cost) {
        int m, n;
        int i, j, res, tmp;
        deque<int> q;

        n = cost.size();
        m = cost[0].size();
        res = INF; //dump(res)
        for (i = 0; i < n; i++)
            for (j = 0; j < m; j++) {
                int dis[n][m];
				int x, y;
				int tmp;
                for (x = 0; x < n; x++)
					for (y = 0; y < m; y++) dis[x][y] = INF;
                dis[i][j] = cost[i][j] - '0';
                while (!q.empty()) q.pop_back();
                q.push_back(i*m+j);
                tmp = 0;
                while (!q.empty()) {
                    int p = q.front();
                    int dx, dy, k;
                    q.pop_front();
                    dx = 0; dy = 1;
                    x = p / m; y = p % m;
                    tmp = max(tmp, dis[x][y]);
                    for (k = 0; k < 4; k++) {
                        int nx, ny;
                        nx = x + dx; ny = y + dy;
                        if (nx >= 0 && nx < n && ny >= 0 && ny < m) {
                            int ndist = dis[x][y] + cost[nx][ny] - '0';
                            if (ndist < dis[nx][ny]) {
                                dis[nx][ny] = ndist;
                                if (cost[nx][ny] == '0') q.push_front(nx*m+ny);
                                else q.push_back(nx*m+ny);
                            }
                        }
                        swap(dx, dy);
//                        dump(dx)dump(dy)
//                        system("pause");
                        dy *= -1;
                    }
                }
                //dump(tmp)
                res = min(res, tmp);
            }

        return res;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	GameOnABoard *obj;
	int answer;
	obj = new GameOnABoard();
	clock_t startTime = clock();
	answer = obj->optimalChoice(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;

	{
	// ----- test 0 -----
	string t0[] = {"11","10"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"01","10"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"111001","001000","111111","001111","001100","001011","111001","010011"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"001001101011","110011001101","111111000001","111101010001","011100101111","110010111000","111111110101","111011110111","111100100011","000000000110","101011011110","011111000111","101111001011"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {
			};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
