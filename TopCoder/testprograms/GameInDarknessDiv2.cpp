#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define dump(x) cerr <<  __LINE__ << " : "<< #x << "  =  " << (x) <<endl;
#define FR(i,a,b) for(int i=(a);i<(b);++i)//[a,b)
#define CLR(a,x) memset(a,x,sizeof(a))
#define MP(A,B) make_pair(A,B)
//freopen("","r",stdin);
//freopen("","w",stdout);
const long long MAXN=(1LL<<62);
const int INF=(1<<30);
const double PI=acos(-1.0);
const double EPS=1e-11;

struct st {
    int x, y;
    int t;
};
queue<st> q;
int dir[4][2] = {-1, 0, 0, 1, 0, -1, 1, 0};

class GameInDarknessDiv2 {
public:
    string m;
    int xa[2505], ya[2505], xb, yb;
    int visited[55][55][2505];

    int check(vector<string> &field, int x, int y) {
        int m = field.size();
        int n = field[0].size();
        if (x >= 0 && x < m && y >= 0 && y < n && field[x][y] != '#') return 1;
        else return 0;
    }

    int solve(vector<string> &field) {
        int k;
        int times = 0;
        while (!q.empty()) q.pop();
        st tmp, t;
        tmp.x = xb; tmp.y = yb; tmp.t = 0;
        CLR(visited, 0);
        visited[xb][yb][0] = 1;
        q.push(tmp);

        while (!q.empty()) {
            tmp = q.front(); q.pop();
            times = tmp.t;
            //dump(tmp.x)dump(tmp.y)dump(tmp.t)
            //system("pause");
            if (times > m.size()) break;
            if (tmp.x == xa[tmp.t] && tmp.y == ya[tmp.t]) continue;
            if (tmp.x == xa[tmp.t+1] && tmp.y == ya[tmp.t+1]) continue;

            for (k = 0; k < 4; k++) {
                t.x = tmp.x + dir[k][0];
                t.y = tmp.y + dir[k][1];
                t.t = tmp.t + 1;
                if (check(field, t.x, t.y) && !visited[t.x][t.y][t.t]) {
                    q.push(t);
                    visited[t.x][t.y][t.t] = 1;
                }
            }
        }
        //dump(times)
        if (times <= m.size()) return 0;
        else return 1;
    }

	string check(vector <string> field, vector <string> moves) {
		int i, j;
		m = "";
		for (i = 0; i < moves.size(); i++)
            m += moves[i];
        for (i = 0; i < field.size(); i++)
            for (j = 0; j < field[0].size(); j++)
                if (field[i][j] == 'A') {
                    xa[0] = i; ya[0] = j;
                }


        //dump(xa[0])dump(ya[0])
        for (i = 0; i < m.size(); i++) {
            int k;
            if (m[i] == 'U') k = 0;
            if (m[i] == 'R') k = 1;
            if (m[i] == 'L') k = 2;
            if (m[i] == 'D') k = 3;
            xa[i+1] = xa[i] + dir[k][0];
            ya[i+1] = ya[i] + dir[k][1];
        }

        for (i = 0; i < field.size(); i++)
            for (j = 0; j < field[0].size(); j++)
                if (field[i][j] == 'B') {
                    xb = i; yb = j;
                }

        //if (xb == xa[1] && yb == yb[1]) return "Alice wins";

        //dump(xb)dump(yb)
        if (solve(field)) return "Bob wins";
        else return "Alice wins";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	GameInDarknessDiv2 *obj;
	string answer;
	obj = new GameInDarknessDiv2();
	clock_t startTime = clock();
	answer = obj->check(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	vector <string> p1;
	string p2;

	{
	// ----- test 0 -----
	string t0[] = {"A.B..","##.##","##.##"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"RRDUR"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Alice wins";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"A.B..","##.##","##..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"RRRLD"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Bob wins";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"###.#","###..","A..B#","###..","###.#"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"RR","R","UDD"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Alice wins";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"A.###",".B..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"RDRRRLLLLUDUDRLURDLUD"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Bob wins";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {".....",".#.#.","##.#.","A###.","B...."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"D"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Alice wins";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	string t0[] = {".#...#....#.......#....#......","...###.#.#..#.#.#..###...#.#.#",".#.#...#...#..#..#.....##.#...","#..#.##..##..#.#..###.#....#.#","..#..#..#...#...#....#..##.#..","#..##..#..##.#.#.####..#.#...#",".#....##.#.....#......##.#.#..",".###.#...#.#.#..#.#.##...##.#.",".....#.#.##..#.#..##...##...#.","#.#.#...#...#.#.#...#.#.#.##.#",".#..##.#..##..#.###...........","..##.....####.......##.#.#.##.","#....##.#.#...####.#...#.#.#..","#.#.#......##.#...#..#.#..#..#","..#..#.#.##...#.#..#..#..#..#.",".#..#...#...#..#..#.#..#..#A#.","..#..#.#.B##.##..#...#.#.##...","#.#.##..#......#.#.#.#.#...#.#","#.#...#.######...#.#.#.#.#.#..","..#.##.#.....#.##..#...#.#.#.#",".#..#..#.#.#.#.#..#.#####..#.#","..#.#.##.#.#.##.#......#..#...","#..#.....#.#.....#.#.##..##.#.","##..###.#..#.#.#.#..##..#...##","##.#...#..##.#.#..#.#..#.#.#..","#..#.#.####..#..#..#..#......#","..#..#.....####..#.##.#.###.#.",".#..#.####.#.#..#.....#...#...","..##.......#...#..####.##.#.#.","#....#.#.#..#.###....#....#..#"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"UURURUULLLLLLLLLLDLLLLUDLLUDDLRDDDULLDLLDDRRRRRDDU","RRUUURUULLD"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Alice wins";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
