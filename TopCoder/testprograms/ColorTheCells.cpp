#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define dump(x) cerr <<  __LINE__ << " : "<< #x << "  =  " << (x) <<endl;
#define FR(i,a,b) for(int i=(a);i<(b);++i)//[a,b)
#define CLR(a,x) memset(a,x,sizeof(a))
#define MP(A,B) make_pair(A,B)
//freopen("","r",stdin);
//freopen("","w",stdout);
const long long MAXN=(1LL<<62);
const int INF=(1<<30);
const double PI=acos(-1.0);
const double EPS=1e-11;

struct Node {
    int t, cur, painted;
    int dry[10];
};

class ColorTheCells {
public:
    int n;
    int res;
    vector<int> dryingTime;
    vector<int> p;
    int count() {
        int ans = INF;
        int cur, i, mask, s;
        int dry[10];
        for (mask = 0; mask < (1<<n); mask++) {
            //dump(mask)
            if (mask & 1) continue;
            //dump(mask & (1<<(n-1)))
            if ((mask & (1<<(n-1))) == 0) continue;
            cur = 0; s = 0; CLR(dry, -1);
            //dump(mask)
            for (i = 0; i < n; i++) {

                int tar = p[i];
                int op = mask & (1<<p[i]);
                if (op) tar--; else tar++;

                while (cur < tar) {
                    cur++;
                    s = max(s+1, dry[cur]+1);
                }
                while (cur > tar) {
                    cur--;
                    s = max(s+1, dry[cur]+1);
                }

                cur = tar;
                s++;
                if (op) tar++; else tar--;
                dry[tar] = s + dryingTime[tar];
                //dump(i) dump(s)
            }
            ans = min(ans, s);
        }
        return ans;
    }

	int minimalTime(vector <int> dryingTime) {
	    this->dryingTime = dryingTime;
		n = dryingTime.size();

		res = INF;
		for (int i = 0; i < n; i++)
            p.push_back(i);

        do {
            int ans = count();
            //dump(ans); system("pause");
            res = min(res, ans);
        } while (next_permutation(p.begin(), p.end()));

		return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	ColorTheCells *obj;
	int answer;
	obj = new ColorTheCells();
	clock_t startTime = clock();
	answer = obj->minimalTime(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;

//	{
//	// ----- test 0 -----
//	int t0[] = {2,2,3};
//			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
//	p1 = 6;
//	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
//	// ------------------
//	}
//
//	{
//	// ----- test 1 -----
//	int t0[] = {1,2,100,1};
//			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
//	p1 = 7;
//	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
//	// ------------------
//	}

	{
	// ----- test 2 -----
	int t0[] = {33,58,21,44};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 26;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {35198,26281,72533,91031,44326,43178,85530};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 26287;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
